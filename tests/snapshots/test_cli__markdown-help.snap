---
source: tests/test-cli.rs
expression: format_outputs(&output)
---
stdout:
# cargo vet CLI manual

> This manual can be regenerated with `cargo vet help-markdown`

Version: `cargo-vet 0.1.0`

Supply-chain security for Rust

### USAGE
```
cargo vet [OPTIONS] [SUBCOMMAND]
```

### OPTIONS
#### `--diff-cache <DIFF_CACHE>`
Use the following path as the diff-cache

The diff-cache stores the summary results used by vet's suggestion machinery. This is
automatically managed in vet's tempdir, but if you want to manually store it somewhere
more reliable, you can.

This mostly exists for testing vet itself.

#### `--exclude <SPEC>`
Exclude packages from being processed

#### `--features <FEATURES>`
Space-separated list of features to activate

#### `--filter-graph <FILTER_GRAPH>`
Filter out different parts of the build graph and pretend that's the true graph

Example: `--filter-graph="exclude(any(eq(is_dev_only(true)),eq(name(serde_derive))))"`

This mostly exists to debug or reduce projects that cargo-vet is mishandling.
Combining this with `cargo vet --output-format=json dump-graph` can produce an
input that can be added to vet's test suite.


The resulting graph is computed as follows:

1. First compute the original graph
2. Then apply the filters to find the new set of nodes
3. Create a new empty graph
4. For each workspace member that still exists, recursively add it and its dependencies

This means that any non-workspace package that becomes "orphaned" by the filters will
be implicitly discarded even if it passes the filters.

Possible filters:

* `include($query)`: only include packages that match this filter
* `exclude($query)`: exclude packages that match this filter


Possible queries:

* `any($query1, $query2, ...)`: true if any of the listed queries are true
* `all($query1, $query2, ...)`: true if all of the listed queries are true
* `not($query)`: true if the query is false
* `$property`: true if the package has this property


Possible properties:

* `name($string)`: the package's name (i.e. `serde`)
* `version($version)`: the package's version (i.e. `1.2.0`)
* `is_root($bool)`: whether it's a root in the original graph (ignoring dev-deps)
* `is_workspace_member($bool)`: whether the package is a workspace-member (can be
tested)
* `is_third_party($bool)`: whether the package is considered third-party by vet
* `is_dev_only($bool)`: whether it's only used by dev (test) builds in the original
graph

#### `--frozen`
Avoid the network entirely, requiring either that the cargo cache is populated or the
dependencies are vendored. Requires --locked

#### `-h, --help`
Print help information

#### `--locked`
Do not fetch new imported audits

#### `--log-file <LOG_FILE>`
Instead of stderr, write logs to this file (only used after successful CLI parsing)

#### `--manifest-path <PATH>`
Path to Cargo.toml

#### `--no-all-features`
Don't use --all-features

We default to passing --all-features to `cargo metadata` because we want to analyze your
full dependency tree

#### `--no-default-features`
Do not activate the `default` feature

#### `--output-file <OUTPUT_FILE>`
Instead of stdout, write output to this file

#### `--output-format <OUTPUT_FORMAT>`
The format of the output

\[default: human]  
\[possible values: human, json]  

#### `-p, --package <SPEC>`
Package to process (see `cargo help pkgid`)

#### `-V, --version`
Print version information

#### `--verbose <VERBOSE>`
How verbose logging should be (log level)

\[default: warn]  
\[possible values: off, error, warn, info, debug, trace]  

#### `--workspace`
Process all packages in the workspace

### SUBCOMMANDS
* [accept-criteria-change](#cargo-vet-accept-criteria-change): Accept changes that a foreign audits.toml made to their criteria
* [add-unaudited](#cargo-vet-add-unaudited): Mark `$package $version` as unaudited
* [certify](#cargo-vet-certify): Mark `$package $version` as reviewed
* [diff](#cargo-vet-diff): Yield a diff against the last reviewed version
* [dump-graph](#cargo-vet-dump-graph): Print a mermaid-js visualization of the cargo build graph as understood by cargo-vet
* [fetch-imports](#cargo-vet-fetch-imports): Explicitly fetch the imports (foreign audit files)
* [fmt](#cargo-vet-fmt): Reformat all of vet's files (in case you hand-edited them)
* [help](#cargo-vet-help): Print this message or the help of the given subcommand(s)
* [init](#cargo-vet-init): initialize cargo-vet for your project
* [inspect](#cargo-vet-inspect): Fetch the source of `$package $version`
* [record-violation](#cargo-vet-record-violation): Mark `$package $version` as a violation of policy
* [regenerate-unaudited](#cargo-vet-regenerate-unaudited): Regenerate the 'unaudited' entries to try to minimize them and make the vet pass
* [suggest](#cargo-vet-suggest): Suggest some low-hanging fruit to review

<br><br><br>
## cargo vet help 
Print this message or the help of the given subcommand(s)

### cargo vet help USAGE
```
cargo vet help [SUBCOMMAND]...
```

### cargo vet help ARGS
#### `<SUBCOMMAND>...`
The subcommand whose help message to display

<br><br><br>
## cargo vet help-markdown 
Print --help as markdown (for generating docs)

### cargo vet help-markdown USAGE
```
cargo vet help-markdown
```

### cargo vet help-markdown OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet dump-graph 
Print a mermaid-js visualization of the cargo build graph as understood by cargo-vet

### cargo vet dump-graph USAGE
```
cargo vet dump-graph [OPTIONS]
```

### cargo vet dump-graph OPTIONS
#### `--depth <DEPTH>`
The depth of the graph to print (for a large project, the full graph is a HUGE MESS)

\[default: first-party]  
\[possible values: roots, workspace, first-party, first-party-and-directs, full]  

#### `-h, --help`
Print help information

<br><br><br>
## cargo vet regenerate-unaudited 
Regenerate the 'unaudited' entries to try to minimize them and make the vet pass

### cargo vet regenerate-unaudited USAGE
```
cargo vet regenerate-unaudited
```

### cargo vet regenerate-unaudited OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet fetch-imports 
Explicitly fetch the imports (foreign audit files)

Bare `cargo vet` will implicitly do this.

### cargo vet fetch-imports USAGE
```
cargo vet fetch-imports
```

### cargo vet fetch-imports OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet fmt 
Reformat all of vet's files (in case you hand-edited them)

All commands that access the store (supply-chain) will implicitly do this.

### cargo vet fmt USAGE
```
cargo vet fmt
```

### cargo vet fmt OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet suggest 
Suggest some low-hanging fruit to review

### cargo vet suggest USAGE
```
cargo vet suggest [OPTIONS]
```

### cargo vet suggest OPTIONS
#### `--guess-deeper`
Try to suggest even deeper down the dependency tree (approximate guessing).

By default, if a dependency doesn't have sufficient audits for *itself* then we won't
try to speculate on anything about its dependencies, because we lack sufficient
information to say for certain what is required of those dependencies. This overrides
that by making us assume the dependencies all need the same criteria as the parent.

#### `-h, --help`
Print help information

<br><br><br>
## cargo vet record-violation 
Mark `$package $version` as a violation of policy

### cargo vet record-violation USAGE
```
cargo vet record-violation [OPTIONS] <PACKAGE> <VERSIONS>
```

### cargo vet record-violation ARGS
#### `<PACKAGE>`
The package to forbid

#### `<VERSIONS>`
The versions to forbid

### cargo vet record-violation OPTIONS
#### `--criteria <CRITERIA>`
The criteria that have failed to be satisfied.

If not provided, we will prompt you for this information(?)

#### `-h, --help`
Print help information

#### `--notes <NOTES>`
A free-form string to include with the new forbid entry

If not provided, there will be no notes.

#### `--who <WHO>`
Who to name as the auditor

If not provided, we will collect this information from the local git.

<br><br><br>
## cargo vet add-unaudited 
Mark `$package $version` as unaudited

### cargo vet add-unaudited USAGE
```
cargo vet add-unaudited [OPTIONS] <PACKAGE> <VERSION>
```

### cargo vet add-unaudited ARGS
#### `<PACKAGE>`
The package to mark as unaudited (trusted)

#### `<VERSION>`
The version to mark as unaudited

### cargo vet add-unaudited OPTIONS
#### `--criteria <CRITERIA>`
The criteria to assume (trust)

If not provided, we will prompt you for this information.

#### `--dependency-criteria <DEPENDENCY_CRITERIA>`
The dependency-criteria to require for this unaudited entry to be valid

If not provided, we will still implicitly require dependencies to satisfy `criteria`.

#### `-h, --help`
Print help information

#### `--no-suggest`
Suppress suggesting this unaudited entry

#### `--notes <NOTES>`
A free-form string to include with the new forbid entry

If not provided, there will be no notes.

<br><br><br>
## cargo vet certify 
Mark `$package $version` as reviewed

### cargo vet certify USAGE
```
cargo vet certify [OPTIONS] [ARGS]
```

### cargo vet certify ARGS
#### `<PACKAGE>`
The package to certify as audited

#### `<VERSION1>`
The version to certify as audited

#### `<VERSION2>`
If present, instead certify a diff from version1->version2

### cargo vet certify OPTIONS
#### `--accept-all`
Accept all criteria without an interactive prompt

#### `--criteria <CRITERIA>`
The criteria to certify for this audit

If not provided, we will prompt you for this information.

#### `--dependency-criteria <DEPENDENCY_CRITERIA>`
The dependency-criteria to require for this audit to be valid

If not provided, we will still implicitly require dependencies to satisfy `criteria`.

#### `-h, --help`
Print help information

#### `--notes <NOTES>`
A free-form string to include with the new audit entry

If not provided, there will be no notes.

#### `--who <WHO>`
Who to name as the auditor

If not provided, we will collect this information from the local git.

<br><br><br>
## cargo vet diff 
Yield a diff against the last reviewed version

### cargo vet diff USAGE
```
cargo vet diff <PACKAGE> <VERSION1> <VERSION2>
```

### cargo vet diff ARGS
#### `<PACKAGE>`
The package to diff

#### `<VERSION1>`
The base version to diff

#### `<VERSION2>`
The target version to diff

### cargo vet diff OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet inspect 
Fetch the source of `$package $version`

### cargo vet inspect USAGE
```
cargo vet inspect <PACKAGE> <VERSION>
```

### cargo vet inspect ARGS
#### `<PACKAGE>`
The package to inspect

#### `<VERSION>`
The version to inspect

### cargo vet inspect OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet accept-criteria-change 
Accept changes that a foreign audits.toml made to their criteria

### cargo vet accept-criteria-change USAGE
```
cargo vet accept-criteria-change
```

### cargo vet accept-criteria-change OPTIONS
#### `-h, --help`
Print help information

<br><br><br>
## cargo vet init 
initialize cargo-vet for your project

### cargo vet init USAGE
```
cargo vet init
```

### cargo vet init OPTIONS
#### `-h, --help`
Print help information


stderr:

